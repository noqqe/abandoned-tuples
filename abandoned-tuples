#!/usr/bin/env python3

import resource
import timeit
import argparse
import random
from PIL import Image

# Saving / Writng


def new_image(x, y, out, data):
    """
    Create Image with x * y dimensions and write list of tuples as content
    :x: int
    :y: int
    :out: string (valid file path)
    :data: list of tuples
    """
    img = Image.new('RGB', (x, y))
    img.putdata(data)
    img.save(out)


def get_image(inf):
    """
    Reads file and extracts dimensions and data as list
    """
    x, y = Image.open(inf).size
    pixels = list(Image.open(inf).getdata())
    return x, y, pixels


# Modification


def brightness(pixels, dec):
    """
    Takes values from -255 to +255

    Make images brighter/darker by adding/reducing rgb values

    [ (255,255,255), (145,77,83), ... ]
    ... to ...
    [ (235,235,235), (115,47,63), ... ]
    """

    for i, pixel in enumerate(pixels):
        l = list(pixel)
        l[0] = l[0] + dec
        l[1] = l[1] + dec
        l[2] = l[2] + dec

        pixels[i] = tuple(l)

    return pixels


def temperature(pixels, dec):
    """
    Makes image look warmer/cooler than before by adding/reducing for red and blue

    [ (230, 155, 30), ... ]
       -20,   0, +20
    [ (210, 155, 50), ... ]
    """

    for i, pixel in enumerate(pixels):
        l = list(pixel)
        l[0] = l[0] + dec
        l[2] = l[2] - dec
        pixels[i] = tuple(l)

    return pixels


def flatten(pixels, fn):
    """
    Raises lower limits of blacks what results in reduing depth and details.

    [ (48, 150, 30) ]
       < ,  > , <
    [ (50, 150, 50) ]
    """

    for i, pixel in enumerate(pixels):
        l = list(pixel)
        if l[0] < fn:
            l[0] = fn

        if l[1] < fn:
            l[1] = fn

        if l[2] < fn:
            l[2] = fn

        pixels[i] = tuple(l)

    return pixels


def iso(pixels, dec):
    """
    Adds noise to an image resulting in having an high ISO like
    look. Done by adding random values in a certain range to the rgb value.

    [ (48, 150, 30), (49, 151, 31) ]
       +10,+10,+10    +1, +1, +1
    """

    for i, pixel in enumerate(pixels):
        l = list(pixel)
        r = random.randint(0, dec)
        l[0] = l[0] + r
        l[1] = l[1] + r
        l[2] = l[2] + r
        pixels[i] = tuple(l)

    return pixels


def contrast(pixels, contrast=90):
    """
    Calculating contrast is bascially making low values lower
    and high values higher

    We use a factor that is precalculated and apply this to a normalized
    version of each RGB value

    [103, 148, 205]
    ... to ...
    [76, 169, 287]

    Example calc
    ((103 - 128) * 2.073) + 128 = 76
    """

    factor = (259 * (contrast + 255)) / (255 * (259 - contrast))

    for i, pixel in enumerate(pixels):
        l = list(pixel)
        l[0] = int(factor * (l[0] - 128) + 128)
        l[1] = int(factor * (l[1] - 128) + 128)
        l[2] = int(factor * (l[2] - 128) + 128)
        pixels[i] = tuple(l)

    return pixels


def main():

    # Commandline options
    parser = argparse.ArgumentParser(prog='Abandoned Tuples')
    parser.add_argument('-c', '--contrast', type=int, nargs=1, help='Add contrast filter (-255 to +255)')
    parser.add_argument('-i', '--iso', type=int, nargs=1, help='Add iso filter (0 to 255)')
    parser.add_argument('-f', '--flatten', type=int, nargs=1, help='Add flattening filter (0 to 255)')
    parser.add_argument('-b', '--brightness', type=int, nargs=1, help='Modify brightness (-255 to +255)')
    parser.add_argument('-t', '--temperature', type=int, nargs=1, help='Modify temperature (warm/cool) (-255 to +255)')
    parser.add_argument('source', help='Image you want to modify')
    parser.add_argument('output', help='Destination file to write result to')
    args = parser.parse_args()

    # Printing
    start = timeit.default_timer()

    # Read file
    x, y, pixels = get_image(args.source)

    # Apply filters
    if args.contrast:
        pixels = contrast(pixels, args.contrast[0])

    if args.iso:
        pixels = iso(pixels, args.iso[0])

    if args.flatten:
        pixels = flatten(pixels, args.flatten[0])

    if args.brightness:
        pixels = brightness(pixels, args.brightness[0])

    if args.temperature:
        pixels = temperature(pixels, args.temperature[0])

    # Write file with all changes to
    new_image(x, y, args.output, pixels)

    # Print timing and memory
    stop = timeit.default_timer()
    print('Time: ', stop - start)
    print("Memory: {:.2} GB".format(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024 / 1024 / 1024))


main()
