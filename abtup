#!/usr/bin/env python3

import sys
import random
from PIL import Image

out = sys.argv[1]

def new_image(x, y, out, data):
    img = Image.new('RGB', (x, y))
    img.putdata(data)
    img.save(out)

def random_pixel():
    return (random.randint(0,255), random.randint(0,255), random.randint(0,255))


def random_image(x, y, out):
    """
    generate random pixels for certain dimensions
    will be just colors and stuff
    """

    pixels = []
    for pixel in range(0, x*y):
        pixels.append(random_pixel())

    new_image(x, y, out, pixels)


def get_image(inf):
    x, y = Image.open(inf).size
    pixels = list(Image.open(inf).getdata())
    return x, y, pixels


def darken(inf, outf, dec):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        l[0] = l[0] - dec
        l[1] = l[1] - dec
        l[2] = l[2] - dec

        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)


def brighten(inf, outf, dec):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        l[0] = l[0] + dec
        l[1] = l[1] + dec
        l[2] = l[2] + dec

        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)


def warming(inf, outf, dec):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        l[0] = l[0] + dec
        l[2] = l[2] - dec


        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)


def cooling(inf, outf, dec):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        l[0] = l[0] - dec
        l[2] = l[2] + dec


        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)

def randomize_vals(inf, outf, r, g, b):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        l[0] = l[0] + r
        l[1] = l[1] + g
        l[2] = l[2] + b

        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)


def flatten(inf, outf, fn):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        if l[0] < fn:
            l[0] = fn

        if l[1] < fn:
            l[1] = fn

        if l[2] < fn:
            l[2] = fn

        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)


def iso(inf, outf):
    x, y, pixels = get_image(inf)

    npixels = []
    for triples in pixels:
        l = list(triples)
        r = random.randint(0,90)
        l[0] = l[0] + r
        l[1] = l[1] + r
        l[2] = l[2] + r

        npixels.append(tuple(l))

    new_image(x, y, outf, npixels)

# random_image(30, 30, out)
# darken("cat.png", "dark.png", 100)
# brighten("cat.png", "bright.png", 100)
# warming("cat2.png", out, 50)
# cooling("cat2.png", out, 50)
# flatten("coffee.png", out, 50)
iso("sky", out)


# for b in range(0,25):
#     r = random.randint(0,128)
#     g = random.randint(0,128)
#     b = random.randint(0,128)
#     randomize_vals("cat3.png", "./random/cat-r{}-g{}-b{}.png".format(r,g,b), r, g, b)

